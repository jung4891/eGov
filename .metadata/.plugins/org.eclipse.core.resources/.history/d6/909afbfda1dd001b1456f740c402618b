package egovframework.example.sendmail.web;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import egovframework.example.sendmail.service.MailService;
import egovframework.example.sendmail.service.MailVO;
import egovframework.rte.fdl.property.EgovPropertyService;

/*
< 컨트롤러 수정해도 서버에서 자동 빌드가 안되고 웹페이지는 Not Found 뜰떄... >
	프로젝트 우클릭 > 빌드Path > missing인 부분 remove(이번엔 test 폴더를 지웠는데 여기에 빌드path가 잡혀 있어서 안됬던거임)
	잘 안될때 결과창 아래에 Problems 꼭 보기!!!
*/

@Controller  
public class MailController {
	
	/** MailService */
	@Resource(name = "mailService")
	private MailService mailService;
	
	/** EgovPropertyService */
	@Resource(name = "propertiesService")
	protected EgovPropertyService propertiesService;
	// PropertyService는 resources > spring의 여러 .xml파일들의 값들을 가지고 올 수 있게 한다.
	
	@RequestMapping(value = "/main.do")
	public String main(ModelMap model) throws Exception {
//		System.out.println("sendmail의 main 호출");
		return "sendmail/main"; 
	}
	
	@RequestMapping(value = "/loginPage.do")
	public String loginPage(ModelMap model) throws Exception {
//		System.out.println("sendmail의 login 호출");  
		return "sendmail/login";        
	}

	@RequestMapping(value = "/login.do")
	public String login(@RequestParam("user_id") String user_id,
			          	@RequestParam("password") String password, 
			          	HttpServletRequest request,
			          	RedirectAttributes r, ModelMap model) throws Exception {
		
		System.out.println("컨트롤러 /login.do");
		MailVO mailVO = new MailVO();
		mailVO.setUserId(user_id);
		mailVO.setPassword(password);
		String user_name = mailService.selectLoginCheck(mailVO);
//		System.out.println("user_name:" + user_name);
		
		if ( user_name != null && !"".equals(user_name)) {
			request.getSession().setAttribute("userId", user_id);
			request.getSession().setAttribute("userName", user_name);  // Mail_SQL에서 name 가져오게끔 설정.
			user_name = URLEncoder.encode(user_name, "UTF-8");	// ★ 한글을 파라미터로 보낼시 ??? 인코딩 애러처리
			return "redirect:/inbox.do?userName=" + user_name;  // 로그인한 사용자의 수신함을 출력하기 위해서 파라미터 사용.
			// server.xml에서 URIEncoding="UTF-8" 설정해야 get방식으로 한글을 파라미터로 전송시 정상 전달된다. 
		} else {
			request.getSession().setAttribute("userId", "");
			request.getSession().setAttribute("userName", "");
			model.addAttribute("msg", "사용자 정보가 올바르지 않습니다.");
//			r.addFlashAttribute("msg", "사용자 정보가 올바르지 않습니다.");
			System.out.println("여기는 오나??");
			return "sendmail/login";
		}
	}
	
	@RequestMapping(value = "/logout.do")
	public String logout(ModelMap model, HttpServletRequest request) throws Exception {
		request.getSession().invalidate();
//		return "board/list";
		return "redirect:/loginPage.do";
	}
	
	@RequestMapping(value = "/wholebox.do")
	public String wholebox(@ModelAttribute("mailVO") MailVO mailVO, 
							ModelMap model) throws Exception {
		List<?> list = mailService.selectMailList(mailVO);
		model.addAttribute("resultList", list);
		return "sendmail/wholebox";        
	}
	
	@RequestMapping(value = "/inbox.do")
	public String inbox(@ModelAttribute("mailVO") MailVO mailVO, 
							@RequestParam("userName") String userName,
							HttpServletRequest request, ModelMap model) throws Exception {
//		userName = URLDecoder.decode(userName, "UTF-8");
//		System.out.println("inbox.do에서 userName:" + userName);
		List<?> list = mailService.selectInboxList(mailVO);
		model.addAttribute("resultList", list);
		return "sendmail/inbox";        
	}
	
	@RequestMapping(value = "/outbox.do")
	public String outbox(ModelMap model) throws Exception {
		return "sendmail/outbox";        
	}
	
	 
}
